--Locomotivation
--James Vannordstrand

package body Layout is

   Terminator_Array : constant Terminator_Array_Type :=
   -- Terminator type, terminator ID
   -- Normal
   -- Reversed
   (((Terminator => Block, Block => 2),
    (Terminator => Block, Block => 11)),
   ((Terminator => Turnout, Turnout => 6),
    (Terminator => Turnout, Turnout => 3)),
   ((Terminator => Block, Block => 4),
    (Terminator => Block, Block => 2)),
   ((Terminator => Block, Block => 5),
    (Terminator => Turnout, Turnout => 18)),
   ((Terminator => Block, Block => 6),
    (Terminator => Block, Block => 4)),
   ((Terminator => Block, Block => 7),
    (Terminator => Turnout, Turnout => 22)),
   ((Terminator => Block, Block => 8),
    (Terminator => Turnout, Turnout => 23)),
   ((Terminator => Turnout, Turnout => 12),
    (Terminator => Turnout, Turnout => 10)),
   ((Terminator => Block, Block => 10),
    (Terminator => Block, Block => 8)),
   ((Terminator => Turnout, Turnout => 15),
    (Terminator => Turnout, Turnout => 13)),
   ((Terminator => Block, Block => 1),
    (Terminator => Block, Block => 10)),
   ((Terminator => Block, Block => 31),
    (Terminator => Block, Block => 10)),
   ((Terminator => Turnout, Turnout => 2),
    (Terminator => Block, Block => 31)),
   ((Terminator => Block, Block => 15),
    (Terminator => Block, Block => 13)),
   ((Terminator => Turnout, Turnout => 5),
    (Terminator => Turnout, Turnout => 4)),
   ((Terminator => Block, Block => 17),
    (Terminator => Block, Block => 15)),
   ((Terminator => Block, Block => 18),
    (Terminator => Turnout, Turnout => 7)),
   ((Terminator => Turnout, Turnout => 17),
    (Terminator => Turnout, Turnout => 8)),
   ((Terminator => Block, Block => 20),
    (Terminator => Block, Block => 18)),
   ((Terminator => Block, Block => 21),
    (Terminator => Turnout, Turnout => 19)),
   ((Terminator => Turnout, Turnout => 21),
    (Terminator => Turnout, Turnout => 20)),
   ((Terminator => Block, Block => 6),
    (Terminator => Block, Block => 21)),
   ((Terminator => Block, Block => 24),
    (Terminator => Block, Block => 21)),
   ((Terminator => Turnout, Turnout => 11),
    (Terminator => Block, Block => 23)),
   ((Terminator => Block, Block => 26),
    (Terminator => Block, Block => 24)),
   ((Terminator => Block, Block => 15),
    (Terminator => Turnout, Turnout => 14)),
   ((Terminator => Block, Block => 26),
    (Terminator => Block, Block => 8)),
   ((Terminator => Block, Block => 24),
    (Terminator => Block, Block => 15)),
   ((Terminator => Block, Block => 10),
    (Terminator => Block, Block => 30)),
   ((Terminator => Block, Block => 18),
    (Terminator => Block, Block => 29)),
   ((Terminator => Turnout, Turnout => 1),
    (Terminator => Turnout, Turnout => 16)),
   ((Terminator => Block, Block => 33),
    (Terminator => Block, Block => 31)),
   ((Terminator => Block, Block => 34),
    (Terminator => Block, Block => 32)),
   ((Terminator => Block, Block => 35),
    (Terminator => Block, Block => 33)),
   ((Terminator => Block, Block => 20),
    (Terminator => Turnout, Turnout => 9)),
   ((Terminator => Block, Block => 37),
    (Terminator => Block, Block => 31)),
   ((Terminator => Block, Block => 38),
    (Terminator => Block, Block => 36)),
   ((Terminator => Block, Block => 35),
    (Terminator => Block, Block => 37)),
   ((Terminator => Block, Block => 21),
    (Terminator => Block, Block => 8)),
   ((Terminator => Block, Block => 7),
    (Terminator => Deadend)));

   Hall_ID_Array : constant Hall_ID_Array_Type :=
   -- Lower block, Higher block
      ((1, 11), (13, 31), (12, 31), (31, 36), (31, 32), (10, 11),
      (10, 12), (13, 14), (2, 13), (1, 2), (14, 15), (15, 26),
      (36, 37), (32, 33), (15, 16), (15, 28), (25, 26), (26, 27),
      (9, 10), (10, 29), (16, 17), (2, 17), (2, 3), (33, 34),
      (37, 38), (24, 28), (24, 25), (8, 27), (8, 9), (29, 30),
      (8, 39), (7, 8), (17, 18), (18, 30), (35, 38), (34, 35),
      (23, 24), (3, 4), (4, 18), (18, 19), (19, 20), (20, 35),
      (20, 21), (21, 39), (4, 5), (21, 23), (21, 22), (6, 22),
      (5, 6), (6, 7), (7, 40));

   Reversing_Point_Array  : constant Reversing_Point_Array_Type :=
      (False, False, True, True, True, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, True, False, False, False, True,
       True, False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False, False,
       False);

   Turnout_Block_ID_Array : constant Turnout_Block_ID_Array_Type :=
   -- Left, Right, Common
      ((13, 12, 31), (2, 14, 13), (1, 13, 2), (26, 14, 15), (16, 28, 15),
       (3, 17, 2), (16, 2, 17), (30, 17, 18), (34, 38, 35), (39, 7, 8),
       (25, 28, 24), (9, 27, 8), (9, 29, 10), (25, 27, 26), (11, 12, 10),
       (36, 32, 31), (4, 19, 18), (18, 3, 4), (35, 19, 20), (39, 20, 21),
       (22, 23, 21), (22, 5, 6), (6, 40, 7), (40, 40, 40), (40, 40, 40),
       (40, 40, 40));

--------------------------------------------------------------------------------
   function Retrieve_Terminator  (Block      : in Block_ID;
                                  Direction  : in Block_Polarity)
                                  return Terminator_Type is
   begin
      return Terminator_Array (Block, Direction).Terminator;
   end Retrieve_Terminator;
--------------------------------------------------------------------------------
   function Retrieve_Turnout_ID (Block     : in Block_ID;
                                 Direction : in Block_Polarity)
                                 return Turnout_ID is
   begin
      return Terminator_Array (Block, Direction).Turnout;
   end Retrieve_Turnout_ID;
--------------------------------------------------------------------------------
   function Retrieve_Next_Block_ID (Block      : in Block_ID;
                                    Direction  : in Block_Polarity)
                                    return Block_ID is
   begin
      return Terminator_Array (Block, Direction).Block;
   end Retrieve_Next_Block_ID;
--------------------------------------------------------------------------------
   function Retrieve_Turnout_Block_ID (Direction : in Turnout_Direction;
                                       Turnout   : in Turnout_ID)
                                       return Block_ID is
   begin
      return Turnout_Block_ID_Array (Turnout, Direction);
   end Retrieve_Turnout_Block_ID;
--------------------------------------------------------------------------------
   function Retrieve_Hall_ID (Current_Block   : in Block_ID;
                              Next_Block      : in Block_ID) return Hall_ID is
      ID : Hall_ID;
   begin
      ID := Hall_ID'First;
      loop
         exit when
            (Hall_ID_Array (ID, First) = Current_Block and
             Hall_ID_Array (ID, Second) = Next_Block) or
            (Hall_ID_Array (ID, First) = Next_Block and
             Hall_ID_Array (ID, Second) = Current_Block);
         ID := Hall_ID'Succ (ID);
      end loop;
      return ID;
   end Retrieve_Hall_ID;
--------------------------------------------------------------------------------
   function Is_Reversing_Point (Sensor : in Hall_ID) return Boolean is
   begin
      return Reversing_Point_Array (Sensor);
   end Is_Reversing_Point;
--------------------------------------------------------------------------------
   function Opposite (Direction : Block_Polarity) return Block_Polarity is
   begin
      if Direction = Normal then
         return Reversed;
      else
         return Normal;
      end if;
   end Opposite;
--------------------------------------------------------------------------------
   function Opposite (Direction : Turnout_Direction) return Turnout_Direction is
   begin
      if Direction = Left then
         return Right;
      else
         return Left;
      end if;
   end Opposite;
--------------------------------------------------------------------------------
end Layout;
