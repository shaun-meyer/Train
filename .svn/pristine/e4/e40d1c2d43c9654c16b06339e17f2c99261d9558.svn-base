--Locomotivation
--James Vannordstrand

package body Layout.Search is

-----------------------------------------------------------------------------

   procedure Recursive_Block (Current   : in     Block_ID;
                              Caboose   : in     Block_ID;
                              Direction : in     Block_Polarity;
                              Depth     : in     Natural;
                              Blocks    :    out Block_List;
                              Turnouts  :    out Turnout_List;
                              Success   :    out Boolean) is

---------------------------------------------------------------------------
--Nested Procedure
      procedure Recursive_Turnout (Current   : in     Block_ID;
                                   Caboose   : in     Block_ID;
                                   Direction : in     Block_Polarity;
                                   Blocks    :    out Block_List;
                                   Turnouts  :    out Turnout_List;
                                   Success   :    out Boolean) is
         Next_Block_ID             : Block_ID;
         Current_Turnout_ID        : Turnout_ID;
         Correct_Turnout_Direction : Turnout_Direction;
         Current_Polarity          : Block_Polarity;
         Hall_Sensor               : Hall_ID;
      begin
         Current_Polarity := Direction;

         Current_Turnout_ID := Retrieve_Turnout_ID (Block     => Current,
                                                    Direction => Direction);
         Next_Block_ID :=
           Retrieve_Turnout_Block_ID (Direction => Left,
                                      Turnout   => Current_Turnout_ID);

         Hall_Sensor := Retrieve_Hall_ID (Current_Block => Current,
                                          Next_Block    => Next_Block_ID);

         if Is_Reversing_Point (Hall_Sensor) then
            Current_Polarity := Opposite (Current_Polarity);
         end if;

         --Handles left branch
         Recursive_Block (Current   => Next_Block_ID,
                          Caboose   => Caboose,
                          Direction => Current_Polarity,
                          Depth     => Depth + 1,
                          Blocks    => Blocks,
                          Turnouts  => Turnouts,
                          Success   => Success);
         Correct_Turnout_Direction := Left;
         --Handles Right branch
         if not Success then
            Next_Block_ID :=
              Retrieve_Turnout_Block_ID (Direction => Right,
                                         Turnout   => Current_Turnout_ID);

            Hall_Sensor := Retrieve_Hall_ID (Current_Block => Current,
                                             Next_Block    => Next_Block_ID);

            if Is_Reversing_Point (Hall_Sensor) then
               Current_Polarity := Opposite (Current_Polarity);
            end if;

            Recursive_Block (Current   => Next_Block_ID,
                             Caboose   => Caboose,
                             Direction => Current_Polarity,
                             Depth     => Depth + 1,
                             Blocks    => Blocks,
                             Turnouts  => Turnouts,
                             Success   => Success);
            Correct_Turnout_Direction := Right;
         end if;
         if Success then
            Turnouts.Size := Turnouts.Size + 1;
            Turnouts.Items (Turnouts.Size).Turnout := Current_Turnout_ID;
            Turnouts.Items (Turnouts.Size).Direction :=
              Correct_Turnout_Direction;
         end if;
      end Recursive_Turnout;

---------------------------------------------------------------------------

      Next_Terminator : Terminator_Type;
      Next_Block_ID : Block_ID;
      Hall_Sensor : Hall_ID;
      Current_Polarity : Block_Polarity;

   begin
      Current_Polarity := Direction;

      if Current = Caboose then
         Success := True;
         Blocks.Size := Blocks.Size + 1;
         Blocks.Items (Blocks.Size).Block := Current;
         Blocks.Items (Blocks.Size).Direction := Opposite (Current_Polarity);
      elsif Success then
         Blocks.Size := Blocks.Size + 1;
         Blocks.Items (Blocks.Size).Block := Current;
         Blocks.Items (Blocks.Size).Direction := Opposite (Current_Polarity);
      else
         Next_Terminator := Retrieve_Terminator (Block     => Current,
                                                 Direction => Direction);

         if Next_Terminator = Turnout then

            Recursive_Turnout (Current   => Current,
                               Caboose   => Caboose,
                               Direction => Direction,
                               Blocks    => Blocks,
                               Turnouts  => Turnouts,
                               Success   => Success);

         elsif Next_Terminator = Block and Depth < Blocks.Max_Size then

            Next_Block_ID := Retrieve_Next_Block_ID (Block     => Current,
                                                     Direction => Direction);

            Hall_Sensor := Retrieve_Hall_ID (Current_Block => Current,
                                             Next_Block    => Next_Block_ID);

            if Is_Reversing_Point (Hall_Sensor) then
               Current_Polarity := Opposite (Current_Polarity);
            end if;

            Recursive_Block (Current   => Next_Block_ID,
                             Caboose   => Caboose,
                             Direction => Current_Polarity,
                             Depth     => Depth + 1,
                             Blocks    => Blocks,
                             Turnouts  => Turnouts,
                             Success   => Success);

         elsif Next_Terminator = Deadend then

            Success := False;

         else

            Success := False;

         end if;

      end if;
   end Recursive_Block;

------------------------------------------------------------------------------

   procedure Blocks_Beneath (Loco     : in  Block_ID;
                             Caboose  : in  Block_ID;
                             Blocks   : out Block_List;
                             Turnouts : out Turnout_List;
                             Success  : out Boolean) is

   begin
      Recursive_Block (Current   => Loco,
                       Caboose   => Caboose,
                       Direction => Normal,
                       Depth     => 1,
                       Blocks    => Blocks,
                       Turnouts  => Turnouts,
                       Success   => Success);

      if not Success then
         Recursive_Block (Current   => Loco,
                          Caboose   => Caboose,
                          Direction => Reversed,
                          Depth     => 1,
                          Blocks    => Blocks,
                          Turnouts  => Turnouts,
                          Success   => Success);
      end if;

   end Blocks_Beneath;

end Layout.Search;
